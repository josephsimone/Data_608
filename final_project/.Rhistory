install.packages(c("leaflet", "shinydashboard"))
shiny::runApp()
runApp()
install.packages('zipcode')
install.packages('zipcode', ' https://CRAN.R-project.org/package=zipcode')
runApp('~/shiny-apps-master/shiny-apps-master/gunviolence')
runApp('~/shiny-apps-master/shiny-apps-master/gunviolence')
runApp('~/shiny-apps-master/shiny-apps-master/gunviolence')
install.packages('xts')
install.packages("xts")
install.packages("leaflet")
install.packages("RColorBrewer")
shiny::runApp('~/shiny-apps-master/shiny-apps-master/gunviolence')
runApp('~/shiny-apps-master/shiny-apps-master/gunviolence')
runApp('~/Data-608-master/module 3/COD_Shiny_App')
install.packages("ggmap")
all <-ratings <- read.csv(paste0("https://raw.githubusercontent.com/josephsimone/Data_608/master/final_project/gv-data.csv"))
all$FullAddress <- paste0(all$Address, ", ", all$City.Or.County, ", ", all$State)
geo_reply <- geocode(all$FullAddress, override_limit=TRUE)
library(ggmap)
geo_reply <- geocode(all$FullAddress, override_limit=TRUE)
?register_google
register_google {ggmap}
google_key()
register_google {ggmap}
google_key()
google <-'AIzaSyDDmdGqnw9L5aRvlK3DzwZOSv1YF0Di3_s'
register_google(key = google, account_type, client, signature, second_limit,
day_limit, write = FALSE)
register_google(key = google)
geo_reply <- geocode(all$FullAddress, override_limit=TRUE)
all <- cbind(all, geo_reply)
View(all)
showing_key()
register_google(key = 'AIzaSyDDmdGqnw9L5aRvlK3DzwZOSv1YF0Di3_s')
showing_key()
google_key
has_google_key()
google_account()
geo_reply <- geocode(all$FullAddress, override_limit=TRUE)
geo_reply <- geocode(all$FullAddress, override_limit=TRUE)
View(geo_reply)
View(all)
all <- all[ -c(10,11) ]
all <- cbind(all, geo_reply)
View(all)
all <- select(all, Incident.Date, FullAddress, lat, lon, X..Killed, X..Injured)
names(all) <- c("Date", "Address", "lat", "lon", "Killed", "Injured")
all$Date <- as.Date(all$Date, format="%B %d, %Y"
)
all <- all[order(all$Date), ]
all$Content <- paste0("<b>Date: </b>", all$Date, "<br/>",
"<b>Killed: </b>", all$Killed, "<br/>",
"<b>Injured: </b>", all$Injured, "<br/>",
"<b>Location: </b>", all$Address)
complete <- complete.cases(all)
completedf <- all[complete,]
completedf <- all[complete,]
saveRDS(all, "GunsGeo.rds")
saveRDS(all, "GV_GeoData.rds")
saveRDS(all, "GV_GeoData.rds")
google_key()
summary(all)
nrow(all)
gv_df <- read.csv(paste0("https://raw.githubusercontent.com/josephsimone/Data_608/master/final_project/gv-data.csv"))
nrow(gv_df)
install.packages('igraph')
library(igraph)
install.packe
install.packag\
install.packages('Rgraphviz')
install.packages(Rgraphviz)
install.packages("BiocManager")
BiocManager::install("Rgraphviz")
library(Rgraphviz)
node1<-"Max EV=$3,950"
node2<-"EV(Cola)=$3,950"
node3<-"EV(Coffee)=$1,900"
node4<-"$1,500"
node5<-"$5,000"
node6<-"$4,000"
node7<-"$1,000"
nodeNames<-c(node1,node2,node3,node4, node5,node6, node7)
rEG <- new("graphNEL", nodes=nodeNames, edgemode="directed")
rEG <- addEdge(nodeNames[1], nodeNames[2], rEG, 1)
rEG <- addEdge(nodeNames[1], nodeNames[3], rEG, 1)
rEG <- addEdge(nodeNames[2], nodeNames[4], rEG, 1
)
rEG <- addEdge(nodeNames[2], nodeNames[5], rEG, 1)
rEG <- addEdge(nodeNames[3], nodeNames[6], rEG, 1)
rEG <- addEdge(nodeNames[3], nodeNames[7], rEG, 1)
eAttrs <- list()
q<-edgeNames(rEG)
eAttrs$label <- c("", "","Cold, p = 0.3", "Warm, p = 0.7", "Cold, p = 0.3",
"Warm, p = 0.7")
names(eAttrs$label) <- c(q[1],q[2], q[3], q[4], q[5], q[6])
edgeAttrs<-eAttrs
attributes<-list(node=list(label="", fillcolor="lightblue", fontsize="15", shape="ellipse"),
edge=list(color="black"),graph=list(rankdir="LR"))
nAttrs <- list()
nAttrs$label <- nodes(rEG)
names(nAttrs$label) <- nodes(rEG)
nAttrs$shape <- c("Max EV=$3,950" = "box","EV(Cola)=$3,950"="circle","EV(Coffee)=$1,900"="circle")
plot(rEG, nodeAttrs=nAttrs, edgeAttrs=eAttrs, attrs=attributes)
knitr::opts_chunk$set(echo = TRUE)
# nodes
node1 <- "master"
node2 <- "geo"
node3 <- "noGeo"
node4 <- "geoFav"
node5 <- "geoNoFav"
node6 <- "geoFavDrill"
node7 <- "geoFavNoDrill"
node8 <- "geoNoFavDrill"
node9 <- "geoNoFavNoDrill"
node10 <- "noGeoDrill"
node11 <- "noGeoNoDrill"
node12 <- "geoFavDrillOil"
node13 <- "geoFavDrillNoOil"
node14 <- "geoFavNoDrillOil"
node15 <- "geoFavNoDrillNoOil"
node16 <- "geoNoFavDrillOil"
node17 <- "geoNoFavDrillNoOil"
node18 <- "geoNoFavNoDrillOil"
node19 <- "geoNoFavNoDrillNoOil"
node20 <- "noGeoDrillOil"
node21 <- "noGeoDrillNoOil"
node22 <- "noGeoNoDrillOil"
node23 <- "noGeoNoDrillNoOil"
nodeNames <- c(node1,node2,node3,node4,node5,node6,node7,node8,node9, node10,
node11, node12, node13, node14, node15, node16, node17, node18,
node19, node20, node21, node22, node23)
# graph object
rEG <- new("graphNEL", nodes=nodeNames, edgemode="directed")
# edges
rEG <- addEdge(nodeNames[1], nodeNames[2], rEG, 1)
rEG <- addEdge(nodeNames[1], nodeNames[3], rEG, 1)
rEG <- addEdge(nodeNames[2], nodeNames[4], rEG, 1)
rEG <- addEdge(nodeNames[2], nodeNames[5], rEG, 1)
rEG <- addEdge(nodeNames[4], nodeNames[6], rEG, 1)
rEG <- addEdge(nodeNames[4], nodeNames[7], rEG, 1)
rEG <- addEdge(nodeNames[5], nodeNames[8], rEG, 1)
rEG <- addEdge(nodeNames[5], nodeNames[9], rEG, 1)
rEG <- addEdge(nodeNames[3], nodeNames[10], rEG, 1)
rEG <- addEdge(nodeNames[3], nodeNames[11], rEG, 1)
rEG <- addEdge(nodeNames[6], nodeNames[12], rEG, 1)
rEG <- addEdge(nodeNames[6], nodeNames[13], rEG, 1)
rEG <- addEdge(nodeNames[7], nodeNames[14], rEG, 1)
rEG <- addEdge(nodeNames[7], nodeNames[15], rEG, 1)
rEG <- addEdge(nodeNames[8], nodeNames[16], rEG, 1)
rEG <- addEdge(nodeNames[8], nodeNames[17], rEG, 1)
rEG <- addEdge(nodeNames[9], nodeNames[18], rEG, 1)
rEG <- addEdge(nodeNames[9], nodeNames[19], rEG, 1)
rEG <- addEdge(nodeNames[10], nodeNames[20], rEG, 1)
rEG <- addEdge(nodeNames[10], nodeNames[21], rEG, 1)
rEG <- addEdge(nodeNames[11], nodeNames[22], rEG, 1)
rEG <- addEdge(nodeNames[11], nodeNames[23], rEG, 1)
eAttrs <- list()
q<-edgeNames(rEG)
eAttrs$label <- c("Geologist", "No Geologist", "Favorable, p=0.6",
"Unfavorable, p=0.4",rep(c("Drill", "No Drill"),3),
rep(c("Oil, p=0.85", "No Oil, p=0.15"),2),
rep(c("Oil, p=0.22", "No Oil, p=0.78"),2),
rep(c("Oil, p=0.45", "No Oil, p=0.55"),2))
names(eAttrs$label) <- c(q[1],q[2], q[3], q[4], q[5], q[6], q[7], q[8], q[9],
q[10],q[11],q[12],q[13],q[14], q[15],q[16],q[17],
q[18],q[19],q[20],q[21],q[22])
edgeAttrs<-eAttrs
# default attributes
attributes<-list(node=list(label="", fillcolor="lightgray", fontsize="15", shape="ellipse"),
edge=list(color="black", fontsize = "12"),graph=list(rankdir="LR"))
# individual node attributes
nAttrs <- list()
nAttrs$label <- c("Max EV=$2.488M","EV=$2.488M","Max EV=$1.7M","Max EV=$4M",
"Max EV =$0.22M","EV=$4M",
"EV=-$0.1M","EV=$0.22M","EV=-$0.1M","EV=$1.7M","EV=$0M",
"$4.9M","-$1.1M","-$0.1M", "-$0.1M","$4.9M","-$1.1M",
"-$0.1M", "-$0.1M","$5M", "-$1M", "$0M", "$0M")
names(nAttrs$label) <- nodes(rEG)
nAttrs$shape <- c(master = "box", geo = "circle", noGeo = "box", geoFav = "box",
geoNoFav = "box", geoFavDrill = "circle", geoFavNoDrill = "circle",
geoNoFavDrill = "circle", geoNoFavNoDrill = "circle",
noGeoDrill = "circle",noGeoNoDrill = "circle")
# plot
plot(rEG, nodeAttrs=nAttrs, edgeAttrs=eAttrs, attrs=attributes)
# define states and outcomes under 3 alternatives
prob <- c(0.35,0.3,0.25,0.1)
a <- c(1100,900,400,300)
b <- c(850,1500,1000,500)
c <- c(700,1200,500,900)
# save to df
mydf <- data.frame(states = 1:4, prob=prob, A=a, B=b, C=c)
# display
cnames <- c("State", "Probability", "Alt A", "Alt B", "Alt C")
kable(mydf, format = 'html', col.names = cnames, format.args=list(big.mark = ",", scientific = F)) %>%
kable_styling("striped")
# define states and outcomes under 3 alternatives
prob <- c(0.35,0.3,0.25,0.1)
a <- c(1100,900,400,300)
b <- c(850,1500,1000,500)
c <- c(700,1200,500,900)
# save to df
mydf <- data.frame(states = 1:4, prob=prob, A=a, B=b, C=c)
# display
cnames <- c("State", "Probability", "Alt A", "Alt B", "Alt C")
kable(mydf, format = 'html', col.names = cnames, format.args=list(big.mark = ",", scientific = F)) %>%
kable_styling("striped")
# define states and outcomes under 3 alternatives
prob <- c(0.35,0.3,0.25,0.1)
a <- c(1100,900,400,300)
b <- c(850,1500,1000,500)
c <- c(700,1200,500,900)
# save to df
mydf <- data.frame(states = 1:4, prob=prob, A=a, B=b, C=c)
# display
cnames <- c("State", "Probability", "Alt A", "Alt B", "Alt C")
kable(mydf,  col.names = cnames, format.args=list(big.mark = ",", scientific = F)) %>%
kable_styling("striped")
# define states and outcomes under 3 alternatives
prob <- c(0.35,0.3,0.25,0.1)
a <- c(1100,900,400,300)
b <- c(850,1500,1000,500)
c <- c(700,1200,500,900)
# save to df
mydf <- data.frame(states = 1:4, prob=prob, A=a, B=b, C=c)
# display
cnames <- c("State", "Probability", "Alt A", "Alt B", "Alt C")
kable(mydf,  col.names = cnames, format.args=list(big.mark = ",", scientific = F)) %>%
kable_styling("striped")
library(kableExtra)
# define states and outcomes under 3 alternatives
prob <- c(0.35,0.3,0.25,0.1)
a <- c(1100,900,400,300)
b <- c(850,1500,1000,500)
c <- c(700,1200,500,900)
# save to df
mydf <- data.frame(states = 1:4, prob=prob, A=a, B=b, C=c)
# display
cnames <- c("State", "Probability", "Alt A", "Alt B", "Alt C")
kable(mydf,  col.names = cnames, format.args=list(big.mark = ",", scientific = F)) %>%
kable_styling("striped")
regret.a <- c(0,600,600,600)
regret.b <- c(250,0,0,400)
regret.c <- c(400,300,500,0)
prob <- c(0.35,0.3,0.25,0.1)
mydf <- data.frame(rbind(regret.a, regret.b, regret.c))
names(mydf) <- c(1,2,3,4)
row.names(mydf) <- c('A','B','C')
kable(mydf, format = 'html',format.args=list(big.mark = ",", scientific = F)) %>%
kable_styling("striped") %>%
add_header_above(c("You"=1,"Nature"=4))
regret.a <- c(0,600,600,600)
regret.b <- c(250,0,0,400)
regret.c <- c(400,300,500,0)
prob <- c(0.35,0.3,0.25,0.1)
mydf <- data.frame(rbind(regret.a, regret.b, regret.c))
names(mydf) <- c(1,2,3,4)
row.names(mydf) <- c('A','B','C')
kable(mydf, format = 'html',format.args=list(big.mark = ",", scientific = F)) %>%
kable_styling("striped") %>%
add_header_above(c("You"=1,"Nature"=4))
EVReg.A <- sum(regret.a * prob)
EVReg.A
EVReg.B <- sum(regret.b * prob)
EVReg.B
EV.c <- with(mydf, sum(C*prob))
EV.c <- with(mydf, sum(C*prob))
EV.c <- with(mydf, sum((C*prob)))
EV.c <- with(mydf, sum(regret.c*prob))
ev.c
EV.c
$X_{ij}\geq0$       $\forall{ij}$ $\epsilon$ $A(G)$
$X_{ij}\geq0$
$X_{ij}\geq0$
$X_{ij}\geq0$
$X_{ij}\geq0$
$X_{ij}\geq0$
$X_{ij}\geq0$
$X_{ij}\geq0$
$X_{ij}\geq0$
$X_{ij}\geq0$
# Week 8 Homework Assignement
## Section 9.3
### page 364 #4
install.packages('Hmisc')
install.packages('VIF')
install.packages('VIF')
install.packages('Hmisc')
install.packages('FactoMineR')
install.packages('corrplot')
install.packages('purr')
plot(rEG, nodeAttrs=nAttrs, edgeAttrs=eAttrs, attrs=attributes)
attributes<-list(node=list(label="", fillcolor="lightblue", fontsize="15", shape="ellipse"),
edge=list(color="black", fontsize = "12"),graph=list(rankdir="LR"))
plot(rEG, nodeAttrs=nAttrs, edgeAttrs=eAttrs, attrs=attributes)
